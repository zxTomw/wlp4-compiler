#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <set>
const std::string ALPHABET    = ".ALPHABET";
const std::string STATES      = ".STATES";
const std::string TRANSITIONS = ".TRANSITIONS";
const std::string INPUT       = ".INPUT";
const std::string EMPTY       = ".EMPTY";
typedef std::map<std::string, std::map <char, std::string>> TransitionMap;

bool isChar(std::string s) {
  return s.length() == 1;
}
bool isRange(std::string s) {
  return s.length() == 3 && s[1] == '-';
}

enum class StateType {
  INITIAL,
  ACCEPTING,
  NORMAL
};

unsigned char wlp4_dfa[] = {
  0x2e, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x0a, 0x30, 0x2d,
  0x39, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x28, 0x20,
  0x29, 0x20, 0x7b, 0x20, 0x7d, 0x20, 0x3d, 0x20, 0x21, 0x20, 0x3c, 0x20,
  0x3e, 0x20, 0x2b, 0x20, 0x2d, 0x20, 0x2a, 0x20, 0x2f, 0x20, 0x25, 0x20,
  0x2c, 0x20, 0x3b, 0x20, 0x5b, 0x20, 0x5d, 0x20, 0x26, 0x0a, 0x2e, 0x53,
  0x54, 0x41, 0x54, 0x45, 0x53, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x49, 0x44, 0x21, 0x20, 0x5a, 0x45, 0x52, 0x4f, 0x21, 0x20, 0x4e, 0x55,
  0x4d, 0x21, 0x20, 0x4c, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x21, 0x20, 0x52,
  0x50, 0x41, 0x52, 0x45, 0x4e, 0x21, 0x20, 0x4c, 0x42, 0x52, 0x41, 0x43,
  0x45, 0x21, 0x20, 0x52, 0x42, 0x52, 0x41, 0x43, 0x45, 0x21, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x72, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x72, 0x65, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74,
  0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x21,
  0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x21,
  0x20, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x21, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x69, 0x21, 0x20, 0x49, 0x46, 0x21, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x65, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6c,
  0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6c, 0x73, 0x21, 0x20,
  0x45, 0x4c, 0x53, 0x45, 0x21, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77,
  0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x68, 0x21, 0x20, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x21, 0x20, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x21, 0x20, 0x57, 0x48, 0x49, 0x4c,
  0x45, 0x21, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x21, 0x20, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x70, 0x72, 0x69, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70,
  0x72, 0x69, 0x6e, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72,
  0x69, 0x6e, 0x74, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72,
  0x69, 0x6e, 0x74, 0x6c, 0x21, 0x20, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x4c,
  0x4e, 0x21, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x21, 0x20,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x21, 0x20, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x63, 0x21, 0x20, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x70, 0x75, 0x74, 0x63, 0x68, 0x21, 0x20, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x70, 0x75, 0x74, 0x63, 0x68, 0x61, 0x21, 0x20, 0x50, 0x55,
  0x54, 0x43, 0x48, 0x41, 0x52, 0x21, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x67, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x21, 0x20,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x21, 0x20, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x63, 0x21, 0x20, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x67, 0x65, 0x74, 0x63, 0x68, 0x21, 0x20, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x67, 0x65, 0x74, 0x63, 0x68, 0x61, 0x21, 0x20, 0x47, 0x45,
  0x54, 0x43, 0x48, 0x41, 0x52, 0x21, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x77, 0x61, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x61, 0x69,
  0x21, 0x20, 0x57, 0x41, 0x49, 0x4e, 0x21, 0x0a, 0x42, 0x45, 0x43, 0x4f,
  0x4d, 0x45, 0x53, 0x21, 0x20, 0x45, 0x51, 0x21, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x69, 0x6e, 0x21, 0x20, 0x49, 0x4e, 0x54, 0x21, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x20, 0x4e, 0x45, 0x21, 0x0a, 0x4c,
  0x54, 0x21, 0x20, 0x47, 0x54, 0x21, 0x20, 0x4c, 0x45, 0x21, 0x20, 0x47,
  0x45, 0x21, 0x0a, 0x50, 0x4c, 0x55, 0x53, 0x21, 0x20, 0x4d, 0x49, 0x4e,
  0x55, 0x53, 0x21, 0x20, 0x53, 0x54, 0x41, 0x52, 0x21, 0x20, 0x53, 0x4c,
  0x41, 0x53, 0x48, 0x21, 0x20, 0x50, 0x43, 0x54, 0x21, 0x20, 0x43, 0x4f,
  0x4d, 0x4d, 0x41, 0x21, 0x20, 0x53, 0x45, 0x4d, 0x49, 0x21, 0x20, 0x0a,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x6e, 0x65, 0x21, 0x20, 0x4e, 0x45, 0x57, 0x21, 0x0a, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x64, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64,
  0x65, 0x21, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x21,
  0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x21, 0x20,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x21, 0x20,
  0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x21, 0x0a, 0x4c, 0x42, 0x52, 0x41,
  0x43, 0x4b, 0x21, 0x20, 0x52, 0x42, 0x52, 0x41, 0x43, 0x4b, 0x21, 0x20,
  0x41, 0x4d, 0x50, 0x21, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x21,
  0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x55, 0x21, 0x20, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x4e, 0x55, 0x4c, 0x21, 0x20, 0x4e, 0x55, 0x4c, 0x4c,
  0x21, 0x0a, 0x2e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x4f,
  0x4e, 0x53, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x30, 0x20, 0x5a,
  0x45, 0x52, 0x4f, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x31, 0x2d,
  0x39, 0x20, 0x4e, 0x55, 0x4d, 0x0a, 0x4e, 0x55, 0x4d, 0x20, 0x30, 0x2d,
  0x39, 0x20, 0x4e, 0x55, 0x4d, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x28, 0x20, 0x4c, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x0a, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x20, 0x29, 0x20, 0x52, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x0a,
  0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x7b, 0x20, 0x4c, 0x42, 0x52, 0x41,
  0x43, 0x45, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x7d, 0x20, 0x52,
  0x42, 0x52, 0x41, 0x43, 0x45, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x72, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x72, 0x20, 0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72,
  0x65, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x20, 0x61, 0x2d, 0x64,
  0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39,
  0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x20,
  0x74, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75,
  0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49,
  0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x20, 0x75,
  0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x20, 0x61, 0x2d, 0x74, 0x20,
  0x76, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20,
  0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75,
  0x20, 0x72, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75,
  0x72, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x20,
  0x61, 0x2d, 0x71, 0x20, 0x73, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x72, 0x65, 0x74, 0x75, 0x72, 0x20, 0x6e, 0x20, 0x52, 0x45, 0x54, 0x55,
  0x52, 0x4e, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75,
  0x72, 0x20, 0x61, 0x2d, 0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x20, 0x69, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x0a,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x20, 0x66, 0x20, 0x49, 0x46, 0x0a,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x20, 0x61, 0x2d, 0x65, 0x20, 0x67,
  0x2d, 0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30,
  0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x65, 0x20, 0x6c, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65,
  0x6c, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x20, 0x61, 0x2d, 0x6b,
  0x20, 0x6d, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39,
  0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6c, 0x20,
  0x73, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6c, 0x73, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6c, 0x20, 0x61, 0x2d, 0x72, 0x20, 0x74,
  0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49,
  0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6c, 0x73, 0x20, 0x65,
  0x20, 0x45, 0x4c, 0x53, 0x45, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65,
  0x6c, 0x73, 0x20, 0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74,
  0x61, 0x72, 0x74, 0x20, 0x77, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77,
  0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x20, 0x68, 0x20, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x77, 0x68, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77,
  0x20, 0x62, 0x2d, 0x67, 0x20, 0x69, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x77, 0x68, 0x20, 0x69, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77,
  0x68, 0x69, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x68, 0x20, 0x61,
  0x2d, 0x68, 0x20, 0x6a, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30,
  0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77,
  0x68, 0x69, 0x20, 0x6c, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x68,
  0x69, 0x6c, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x20,
  0x61, 0x2d, 0x6b, 0x20, 0x6d, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x77, 0x68, 0x69, 0x6c, 0x20, 0x65, 0x20, 0x57, 0x48, 0x49, 0x4c, 0x45,
  0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x20, 0x61,
  0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30,
  0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x70, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x70, 0x20, 0x72, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70,
  0x72, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x20, 0x61, 0x2d, 0x71,
  0x20, 0x73, 0x2d, 0x74, 0x20, 0x76, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x70, 0x72, 0x20, 0x69, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70,
  0x72, 0x69, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x20, 0x61,
  0x2d, 0x68, 0x20, 0x6a, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30,
  0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70,
  0x72, 0x69, 0x20, 0x6e, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72,
  0x69, 0x6e, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x20,
  0x61, 0x2d, 0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x70, 0x72, 0x69, 0x6e, 0x20, 0x74, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x70, 0x72, 0x69, 0x6e, 0x74, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70,
  0x72, 0x69, 0x6e, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75, 0x2d, 0x7a, 0x20,
  0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x20, 0x6c, 0x20,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6c, 0x0a,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x20, 0x61,
  0x2d, 0x6b, 0x20, 0x6d, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30,
  0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70,
  0x72, 0x69, 0x6e, 0x74, 0x6c, 0x20, 0x6e, 0x20, 0x50, 0x52, 0x49, 0x4e,
  0x54, 0x4c, 0x4e, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69,
  0x6e, 0x74, 0x6c, 0x20, 0x61, 0x2d, 0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20,
  0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x70, 0x20, 0x75, 0x20, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x70, 0x75, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x20,
  0x74, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75,
  0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49,
  0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x20, 0x63,
  0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x63, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x20, 0x61, 0x20, 0x62, 0x20,
  0x64, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20,
  0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x63,
  0x20, 0x68, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x63,
  0x68, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x63, 0x20,
  0x61, 0x2d, 0x67, 0x20, 0x69, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x70, 0x75, 0x74, 0x63, 0x68, 0x20, 0x61, 0x20, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x70, 0x75, 0x74, 0x63, 0x68, 0x61, 0x0a, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x70, 0x75, 0x74, 0x63, 0x68, 0x20, 0x62, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x63, 0x68, 0x61, 0x20, 0x72, 0x20,
  0x50, 0x55, 0x54, 0x43, 0x48, 0x41, 0x52, 0x0a, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x70, 0x75, 0x74, 0x63, 0x68, 0x61, 0x20, 0x61, 0x2d, 0x71, 0x20,
  0x73, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20,
  0x49, 0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x67, 0x20, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x67, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67,
  0x20, 0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x67, 0x20, 0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d,
  0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44,
  0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x20, 0x74, 0x20, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x0a, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x67, 0x65, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75, 0x2d, 0x7a, 0x20,
  0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x20, 0x63, 0x20, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x63, 0x0a, 0x73, 0x65, 0x65, 0x6e,
  0x5f, 0x67, 0x65, 0x74, 0x20, 0x61, 0x20, 0x62, 0x20, 0x64, 0x2d, 0x7a,
  0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x63, 0x20, 0x68, 0x20,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x63, 0x68, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x63, 0x20, 0x61, 0x2d, 0x67,
  0x20, 0x69, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39,
  0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x74,
  0x63, 0x68, 0x20, 0x61, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65,
  0x74, 0x63, 0x68, 0x61, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65,
  0x74, 0x63, 0x68, 0x20, 0x62, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x67, 0x65, 0x74, 0x63, 0x68, 0x61, 0x20, 0x72, 0x20, 0x47, 0x45, 0x54,
  0x43, 0x48, 0x41, 0x52, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x65,
  0x74, 0x63, 0x68, 0x61, 0x20, 0x61, 0x2d, 0x71, 0x20, 0x73, 0x2d, 0x7a,
  0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x20, 0x61, 0x20, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x77, 0x61, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x61,
  0x20, 0x69, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x0a,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x61, 0x20, 0x61, 0x2d, 0x68, 0x20,
  0x6a, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20,
  0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x20,
  0x6e, 0x20, 0x57, 0x41, 0x49, 0x4e, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x77, 0x61, 0x69, 0x20, 0x61, 0x2d, 0x6d, 0x20, 0x6f, 0x2d, 0x7a, 0x20,
  0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73,
  0x74, 0x61, 0x72, 0x74, 0x20, 0x3d, 0x20, 0x42, 0x45, 0x43, 0x4f, 0x4d,
  0x45, 0x53, 0x0a, 0x42, 0x45, 0x43, 0x4f, 0x4d, 0x45, 0x53, 0x20, 0x3d,
  0x20, 0x45, 0x51, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x20, 0x6e,
  0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x74, 0x20, 0x49, 0x4e, 0x54, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75,
  0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49,
  0x44, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x21, 0x20, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x65, 0x78, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65,
  0x78, 0x20, 0x3d, 0x20, 0x4e, 0x45, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
  0x20, 0x3c, 0x20, 0x4c, 0x54, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x3e, 0x20, 0x47, 0x54, 0x0a, 0x4c, 0x54, 0x20, 0x3d, 0x20, 0x4c, 0x45,
  0x0a, 0x47, 0x54, 0x20, 0x3d, 0x20, 0x47, 0x45, 0x0a, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x20, 0x2b, 0x20, 0x50, 0x4c, 0x55, 0x53, 0x0a, 0x73, 0x74,
  0x61, 0x72, 0x74, 0x20, 0x2d, 0x20, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x0a,
  0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x2a, 0x20, 0x53, 0x54, 0x41, 0x52,
  0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x2f, 0x20, 0x53, 0x4c, 0x41,
  0x53, 0x48, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x25, 0x20, 0x50,
  0x43, 0x54, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x2c, 0x20, 0x43,
  0x4f, 0x4d, 0x4d, 0x41, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x3b,
  0x20, 0x53, 0x45, 0x4d, 0x49, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x6e, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x6e, 0x20, 0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6e,
  0x65, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x20, 0x61, 0x2d, 0x64,
  0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39,
  0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x20,
  0x77, 0x20, 0x4e, 0x45, 0x57, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6e,
  0x65, 0x20, 0x61, 0x2d, 0x76, 0x20, 0x78, 0x2d, 0x7a, 0x20, 0x41, 0x2d,
  0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x20, 0x64, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x0a,
  0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x20, 0x65, 0x20, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x64, 0x65, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x20,
  0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f,
  0x64, 0x65, 0x20, 0x6c, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65,
  0x6c, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x20, 0x61, 0x2d,
  0x6b, 0x20, 0x6d, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d,
  0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65,
  0x6c, 0x20, 0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
  0x65, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x20, 0x61,
  0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30,
  0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64,
  0x65, 0x6c, 0x65, 0x20, 0x74, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64,
  0x65, 0x6c, 0x65, 0x74, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65,
  0x6c, 0x65, 0x20, 0x61, 0x2d, 0x73, 0x20, 0x75, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x65,
  0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x20, 0x65, 0x20, 0x44,
  0x45, 0x4c, 0x45, 0x54, 0x45, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x64,
  0x65, 0x6c, 0x65, 0x74, 0x20, 0x61, 0x2d, 0x64, 0x20, 0x66, 0x2d, 0x7a,
  0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a,
  0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x5b, 0x20, 0x4c, 0x42, 0x52, 0x41,
  0x43, 0x4b, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x5d, 0x20, 0x52,
  0x42, 0x52, 0x41, 0x43, 0x4b, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x26, 0x20, 0x41, 0x4d, 0x50, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
  0x4e, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x0a, 0x73, 0x65, 0x65,
  0x6e, 0x5f, 0x4e, 0x20, 0x55, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e,
  0x55, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x20, 0x41, 0x2d, 0x54,
  0x20, 0x56, 0x2d, 0x5a, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x30, 0x2d, 0x39,
  0x20, 0x49, 0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x55, 0x20,
  0x4c, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x55, 0x4c, 0x0a, 0x73,
  0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x55, 0x20, 0x41, 0x2d, 0x4b, 0x20, 0x4d,
  0x2d, 0x5a, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49,
  0x44, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e, 0x55, 0x4c, 0x20, 0x4c,
  0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x0a, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x4e,
  0x55, 0x4c, 0x20, 0x41, 0x2d, 0x4b, 0x20, 0x4d, 0x2d, 0x5a, 0x20, 0x61,
  0x2d, 0x7a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x73, 0x74,
  0x61, 0x72, 0x74, 0x20, 0x61, 0x2d, 0x63, 0x20, 0x66, 0x20, 0x68, 0x20,
  0x6a, 0x2d, 0x6d, 0x20, 0x6f, 0x20, 0x71, 0x20, 0x73, 0x20, 0x74, 0x20,
  0x75, 0x20, 0x76, 0x20, 0x78, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x4d, 0x20,
  0x4f, 0x2d, 0x5a, 0x20, 0x49, 0x44, 0x0a, 0x52, 0x45, 0x54, 0x55, 0x52,
  0x4e, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d,
  0x39, 0x20, 0x49, 0x44, 0x0a, 0x57, 0x41, 0x49, 0x4e, 0x20, 0x61, 0x2d,
  0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44,
  0x0a, 0x49, 0x4e, 0x54, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a,
  0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x49, 0x46, 0x20, 0x61,
  0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49,
  0x44, 0x0a, 0x45, 0x4c, 0x53, 0x45, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41,
  0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x57, 0x48,
  0x49, 0x4c, 0x45, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x50, 0x52, 0x49, 0x4e, 0x54,
  0x4c, 0x4e, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30,
  0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x50, 0x55, 0x54, 0x43, 0x48, 0x41,
  0x52, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d,
  0x39, 0x20, 0x49, 0x44, 0x0a, 0x47, 0x45, 0x54, 0x43, 0x48, 0x41, 0x52,
  0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39,
  0x20, 0x49, 0x44, 0x0a, 0x4e, 0x55, 0x4c, 0x4c, 0x20, 0x61, 0x2d, 0x7a,
  0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a,
  0x4e, 0x45, 0x57, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x54,
  0x45, 0x20, 0x61, 0x2d, 0x7a, 0x20, 0x41, 0x2d, 0x5a, 0x20, 0x30, 0x2d,
  0x39, 0x20, 0x49, 0x44, 0x0a, 0x49, 0x44, 0x20, 0x41, 0x2d, 0x5a, 0x20,
  0x61, 0x2d, 0x7a, 0x20, 0x30, 0x2d, 0x39, 0x20, 0x49, 0x44, 0x0a, 0x2e,
  0x49, 0x4e, 0x50, 0x55, 0x54, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
  0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x69, 0x66, 0x0a, 0x77, 0x68, 0x69,
  0x6c, 0x65, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6c, 0x6e, 0x0a, 0x67,
  0x65, 0x74, 0x63, 0x68, 0x61, 0x72, 0x0a, 0x4e, 0x55, 0x4c, 0x4c, 0x0a,
  0x6e, 0x65, 0x77, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x0a, 0x3d,
  0x3d, 0x0a, 0x26, 0x0a, 0x2a, 0x0a, 0x2f, 0x0a, 0x25, 0x0a, 0x30, 0x39,
  0x31, 0x30, 0x32, 0x0a, 0x31, 0x32, 0x33, 0x31, 0x0a, 0x69, 0x6e, 0x74,
  0x0a, 0x77, 0x61, 0x69, 0x6e, 0x0a, 0x69, 0x6e, 0x74, 0x77, 0x61, 0x69,
  0x6e, 0x0a, 0x32, 0x39, 0x33, 0x61, 0x62, 0x0a, 0x31, 0x61, 0x0a, 0x6e,
  0x61, 0x6e, 0x63, 0x79, 0x0a, 0x77, 0x61, 0x69, 0x73, 0x74, 0x0a, 0x69,
  0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x0a, 0x28, 0x0a, 0x29, 0x0a, 0x7b, 0x0a,
  0x7d, 0x0a, 0x2b, 0x0a, 0x3d, 0x0a, 0x3d, 0x3d, 0x0a, 0x3e, 0x0a, 0x3c,
  0x0a, 0x2d, 0x0a, 0x3e, 0x3d, 0x0a, 0x3c, 0x3d, 0x0a, 0x5b, 0x0a, 0x5d,
  0x0a, 0x2a, 0x0a, 0x77, 0x68, 0x61, 0x6c, 0x65, 0x0a, 0x69, 0x6e, 0x63,
  0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x69, 0x71, 0x0a
};
unsigned int wlp4_dfa_len = 3790;





void outputToken(const std::string &token, const std::string &state) {
  std::string s = state;
  if (state == "ZERO") {
    s = "NUM";
  }
  if (state.substr(0, 4) == "seen") {
    s = "ID";
  }
  std::cout << s << " " << token << std::endl;
}

void outputError(const std::string &s) {
  std::cerr << "ERROR: " << s << std::endl;
}

class DFA {
  std::string token;
  std::set <char> alphabet;
  TransitionMap transitions;
  std::map<std::string, StateType> states;
  std::string currentState;
  std::string startState;
public:
  DFA(
    std::set <char> alphabet, TransitionMap transitions, std::map<std::string, StateType> states, std::string startState
  ) : alphabet(alphabet), transitions(transitions), states(states), currentState(startState), startState(startState) {}
  void appendAlphabet(char c) {
    alphabet.insert(c);
  }
  bool isInAlphabet(char c) {
    return alphabet.find(c) != alphabet.end();
  }
  bool isInAcceptingState() {
    return states[currentState] == StateType::ACCEPTING;
  }
  void printToken() {
    outputToken(token, currentState);
  }
  // returns false if entered error state.
  bool applTransition(char c) {
    
    auto it = transitions[currentState].find(c);
    if (it == transitions[currentState].end()) {
      if (states[currentState] != StateType::ACCEPTING) {
        // no valid transition, not in accepting state
        outputError("invalid token, state: " + currentState + ", char: " + c);
        return false;
      } else {
        // in accepting state, go to starting state and output token
        outputToken(token, currentState);
        token = "";
        currentState = startState;
        it = transitions[currentState].find(c);
      }
    } 
    // valid transition, do transition
    currentState = it->second;  
    
    token += c;
    return true;
  }
  bool scan(std::istringstream &s) {
    currentState = startState;
    token = "";
    char c;
    while (s.peek() != EOF) {
      c = s.peek();
      auto it = transitions[currentState].find(c);
      if (it != transitions[currentState].end()) {
        s >> c;
        token += c;
        currentState = it->second;
      } else {
        // stuck
        if (states[currentState] == StateType::ACCEPTING) {
          outputToken(token, currentState);
          currentState = startState;
          token = "";
        } else {
          outputError("invalid token, state: " + currentState + ", char: " + c);
          return false;
        }
      }
    }
    if (states[currentState] == StateType::ACCEPTING) {
      if (currentState == "NUM") {
        auto numeric = std::stoll(token);
        if (numeric > 2147483647) {
          outputError("number out of range");
          return false;
        }
      }
      outputToken(token, currentState);
    } else {
      outputError("incomplete input");
      return false;
    }
    return true;
  }
};


// Locations in the program that you should modify to store the
// DFA information have been marked with four-slash comments:
//// (Four-slash comment)
int main() {
  std::string foo((char *) wlp4_dfa, wlp4_dfa_len);
  std::stringstream in(foo);
  std::string s;
  
  TransitionMap transitions = {};
  std::map<std::string, StateType> states = {};
  std::string startState;
  std::set <char> alphabet;

  std::getline(in, s); // Alphabet section (skip header)
  // Read characters or ranges separated by whitespace
  while(in >> s) {
    if (s == STATES) { 
      break; 
    } else {
      if (isChar(s)) {
        alphabet.insert(s[0]);
      } else if (isRange(s)) {
        for(char c = s[0]; c <= s[2]; ++c) {
          alphabet.insert(c);
        }
      } 
    }
  }

  std::getline(in, s); // States section (skip header)
  // Read states separated by whitespace
  while(in >> s) {
    if (s == TRANSITIONS) { 
      break; 
    } else {
      static bool initial = true;
      bool accepting = false;
      if (s.back() == '!' && !isChar(s)) {
        accepting = true;
        s.pop_back();
      }
      StateType st = StateType::NORMAL;
      if (initial) {
        st = StateType::INITIAL;
        startState = s;
        initial = false;
      }
      if (accepting) {
        st = StateType::ACCEPTING;
        //// The state is accepting
      }
      states[s] = st;
    }
  }

  std::getline(in, s); // Transitions section (skip header)
  // Read transitions line-by-line
  while(std::getline(in, s)) {
    if (s == INPUT) { 
      // Note: Since we're reading line by line, once we encounter the
      // input header, we will already be on the line after the header
      break; 
    } else {
      std::string fromState, symbols, toState;
      std::istringstream line(s);
      std::vector<std::string> lineVec;
      while(line >> s) {
        lineVec.push_back(s);
      }
      fromState = lineVec.front();
      toState = lineVec.back();
      for(int i = 1; i < lineVec.size()-1; ++i) {
        std::string s = lineVec[i];
        if (isChar(s)) {
          symbols += s;
        } else if (isRange(s)) {
          for(char c = s[0]; c <= s[2]; ++c) {
            symbols += c;
          }
        }
      }
      for ( char c : symbols ) {
        auto transitionIt = transitions.find(fromState);
        if (transitionIt == transitions.end()) {
          transitions[fromState] = {{c, toState}};
        } else {
          transitionIt->second[c] = toState;
        }
      }
    }
  }
  DFA dfa(alphabet, transitions, states, startState);

  // Input section (already skipped header)
  std::string input;
  while(std::cin >> input) {
    if (input == "//") {
      getline(std::cin, input);
      continue;
    }
    std::istringstream oss {input};
    if (!dfa.scan(oss)) return 0;
  }
  
}
